import random
import string
from dataclasses import dataclass, field


def generate_id() -> str:
    """
    Generates a random ID consisting of 15 lowercase ASCII characters.
    """
    return "".join(random.choices(string.ascii_lowercase, k=15))


def handle_error(func):
    """
    Decorator that handles exceptions raised by the decorated function.
    """
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            return e
    return wrapper


@handle_error
@dataclass
class Student:
    name: str
    surname: str
    active: bool = True
    login: str = field(init=False)
    id: str = field(init=False)

    def __post_init__(self):
        """
        Initializes the login and ID fields after
        the default __init__ is completed.
        The login is generated by concatenatingthe first letter
        of the name with the surname.
        The ID is generated using the generate_id function.
        """
        self.login = f"{self.name[0].upper()}{self.surname.lower()}"
        self.id = generate_id()

    def __init__(self, name, surname, active: bool = True, **kwargs):
        """
        Custom __init__ method to prevent setting 'login' and 'id'
        during initialization.
        """
        if 'login' in kwargs:
            str = ".__init__() got an unexpected keyword argument 'id'"
            raise TypeError(f"{self.__class__.__name__}" + str)
        elif 'id' in kwargs:
            str = ".__init__() got an unexpected keyword argument 'id'"
            raise TypeError(f"{self.__class__.__name__}" + str)
        self.name = name
        self.surname = surname
        self.active = active
        self.__post_init__()
